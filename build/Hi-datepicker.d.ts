import { ViewContainerRef, OnInit, EventEmitter } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
export declare const CALENDAR_VALUE_ACCESSOR: any;
export declare class HiDatePickerComponent implements ControlValueAccessor, OnInit {
    class: string;
    expanded: boolean;
    opened: boolean;
    format: string;
    viewFormat: string;
    firstWeekdaySaturday: boolean;
    persianCalendar: boolean;
    time: boolean;
    alwaysOpened: boolean;
    hiddenButton: boolean;
    offAMOrPM: boolean;
    minDate: HiDate;
    maxDate: HiDate;
    initTime: any;
    changeDate: EventEmitter<{}>;
    _date: any;
    _selectedDate: any;
    el: Element;
    timeData: {
        hour: number;
        minute: number;
    };
    days: HiDatePicker[];
    _formatHeaderCalendar: string;
    type: string;
    isRTL: string;
    isYearEdit: boolean;
    AMOrPM: string;
    _minDate: HiDate;
    _maxDate: HiDate;
    i18n: any;
    private i18nObj;
    constructor(viewContainerRef: ViewContainerRef);
    ngOnInit(): void;
    value: any;
    selectedDate: any;
    year: number;
    subtract(count: number, type: string): void;
    add(count: number, type: string): void;
    hour: number;
    minute: number;
    changeTime(): void;
    generateCalendar(): void;
    jalaliGenerateCalendar(): void;
    checkValidDate(d: HiDatePicker): HiDatePicker;
    checkChecker(d: HiDate): boolean;
    validMaxDate(d: HiDatePicker): boolean;
    validMinDate(d: HiDatePicker): boolean;
    miladiGenerateCalendar(): void;
    selectDate(e: MouseEvent, i: number, enabled: boolean): void;
    prevMonth(): void;
    nextMonth(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    toggle(): void;
    open(): void;
    close(): void;
    AMPM(): void;
    aro(): void;
}
